#include <stdio.h>
#include <stdlib.h>
#include <conio.h>


typedef struct tip_nod
{
    int cheie;  /*informatie */
    struct tip_nod *stg,*dr;
} TIP_NOD;

TIP_NOD *rad;


void nevel(TIP_NOD *p, int nivel)
{
    int i;
    int caloc[5];
    if (p!=0)
{

if(nivel==0)caloc=p->cheie;
        printf("%2d\n",p->cheie);
        nevel(p->stg,nivel);
        nevel(p->dr,nivel);
}
}
void preordine(TIP_NOD *p, int nivel)
{
    int i;
    if (p!=0)
    {
        for(i=0; i<=nivel; i++) printf("  ");
        printf("%2d\n",p->cheie);
        preordine(p->stg,nivel+1);
        preordine(p->dr,nivel+1);
    }
}
void inordine(TIP_NOD *p, int nivel)
{
    int i;
    if (p!=0)
    {
        inordine(p->stg,nivel+1);
        for(i=0; i<=nivel; i++) printf("  ");
        printf("%2d\n",p->cheie);
        inordine(p->dr,nivel+1);
    }
}
void postordine(TIP_NOD *p, int nivel)
{
    int i;
    if (p!=0)
    {
        postordine(p->stg,nivel+1);
        postordine(p->dr,nivel+1);
        for(i=0; i<=nivel; i++) printf("  ");
        printf("%2d\n",p->cheie);
    }
}

void inserare(int key)
{
    TIP_NOD *p,*q;
    int n;
    n=sizeof(TIP_NOD);
    p=(TIP_NOD *)malloc(n);
    p->cheie=key;
    p->stg=0;
    p->dr=0;
    if(rad==0)
    {
        rad=p;
        return;
    }
    q=rad;
    for(;;)
    {
        if (key < q->cheie)
        {
            if(q->stg==0)
            {
                q->stg=p;
                return;
            }
            else q=q->stg;
        }
        else if (key > q->cheie)
        {
            if(q->dr == 0)
            {
                q->dr=p;
                return;
            }
            else q=q->dr;
        }
        else     /* chei   egale */
        {
            printf("\n Exista un nod de cheie = %d\n",key);
            /* eventuala prelucrare a nodului */
            free(p);
            return;
        }
    }
}



// inserare recursiva



TIP_NOD *stergere_nod(TIP_NOD *rad,int key)
{
    TIP_NOD *p,*tata_p;           /* p este nodul de sters, iar tata_p este tatal lui */
    TIP_NOD *nod_inlocuire,*tata_nod_inlocuire;
    /*nodul care il va inlocui pe p si tatal sau */
    int directie;               /*stg=1;dr=2*/
    if(rad==0) return 0;        /*arborele este vid */
    p=rad;
    tata_p=0;

    /* cautare nod cu cheia key */
    while((p!=0)&&(p->cheie!=key))
    {
        if (key<p->cheie)      /*cautare in stanga */
        {
            tata_p=p;
            p=p->stg;
            directie=1;
        }
        else      /*cautare in dreapta */
        {
            tata_p=p;
            p=p->dr;
            directie=2;
        }
    }
    if(p==0)
    {
        printf("\n NU EXISTA NOD CU CHEIA=%d\n",key);
        return rad;
    }

    /* s-a gasit nodul p de cheie key */
    if(p->stg==0) nod_inlocuire=p->dr; /* nodul de sters p nu are fiu stang */
    else if(p->dr==0) nod_inlocuire=p->stg; /*nodul de sters p  nu are fiu drept*/
    else    /* nodul de sters p are fiu stang si fiu drept */
    {
        tata_nod_inlocuire=p;
        nod_inlocuire=p->dr;        /* se cauta in subarborele drept*/
        while(nod_inlocuire->stg!=0)
        {
            tata_nod_inlocuire=nod_inlocuire;
            nod_inlocuire=nod_inlocuire->stg;
        }
        if(tata_nod_inlocuire!=p)
        {
            tata_nod_inlocuire->stg=nod_inlocuire->dr;
            nod_inlocuire->dr=p->dr;
        }
        nod_inlocuire->stg=p->stg;
    }
    free(p);
    printf("\nNodul de cheie=%d a fost sters!\n",key);
    if(tata_p==0)  return nod_inlocuire; /*s-a sters chiar radacina initiala */
    else
    {
        if (directie==1) tata_p->stg=nod_inlocuire;
        else tata_p->dr=nod_inlocuire;
        return rad;
    }
}


int main(int argc, char *argv[])
{
    TIP_NOD *p;
    int i, n,key;
    char ch;

    rad = 0;
    inserare(3);
    inserare(1);
    inserare(2);
    inserare(5);
    inserare(4);
    printf("Inordine_____________"); printf("\n");
   inordine(rad,0);
    printf("\n");
     printf("\n");
     printf("Postordine_____________"); printf("\n");
      postordine(rad,0);
        printf("\n");
         printf("\n");
          printf("Preordine_____________"); printf("\n");
        preordine(rad,0);
    stergere_nod(rad,5);
    stergere_nod(rad,1);

      printf("\n");
     printf("\n");
     printf("Inordine_____________"); printf("\n");
    inordine(rad,0);
    printf("\n");
     printf("\n");
      printf("Postordine_____________"); printf("\n");
      postordine(rad,0);
        printf("\n");
         printf("\n");
          printf("Preordine_____________"); printf("\n");
        preordine(rad,0);
  printf("\n");
     printf("\n");
          inserare(5);
    inserare(1);    printf("Inordine_____________"); printf("\n");
        inordine(rad,0);
    printf("\n");
     printf("\n");printf("Postordine_____________"); printf("\n");
      postordine(rad,0);
        printf("\n");
         printf("\n"); printf("Preordine_____________"); printf("\n");
        preordine(rad,0);

        nevel(rad,1);
    system("PAUSE");
    return 0;
}
